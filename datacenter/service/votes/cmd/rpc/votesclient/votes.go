// Code generated by goctl. DO NOT EDIT!
// Source: votes.proto

//go:generate mockgen -destination ./votes_mock.go -package votesclient -source $GOFILE

package votesclient

import (
	"context"

	"go-zero-demo/datacenter/service/votes/cmd/rpc/votes"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	ActidReq       = votes.ActidReq
	LimitReq       = votes.LimitReq
	EnrollReq      = votes.EnrollReq
	VotesResp      = votes.VotesResp
	ActInfoResp    = votes.ActInfoResp
	ActInfoReq     = votes.ActInfoReq
	EnrollInfoReq  = votes.EnrollInfoReq
	EnrollResp     = votes.EnrollResp
	EnrollListResp = votes.EnrollListResp
	VotesReq       = votes.VotesReq

	Votes interface {
		// 获取作品信息
		GetEnrollInfo(ctx context.Context, in *EnrollInfoReq) (*EnrollResp, error)
		// 获取 作品列表
		GetEnrollList(ctx context.Context, in *ActidReq) (*EnrollListResp, error)
		// 获取 活动信息
		GetActivityInfo(ctx context.Context, in *ActInfoReq) (*ActInfoResp, error)
		// 报名
		Enroll(ctx context.Context, in *EnrollReq) (*EnrollResp, error)
		// 投票
		Votes(ctx context.Context, in *VotesReq) (*VotesResp, error)
		// 增加活动的爆光量
		IncrActiviView(ctx context.Context, in *ActInfoReq) (*ActInfoResp, error)
	}

	defaultVotes struct {
		cli zrpc.Client
	}
)

func NewVotes(cli zrpc.Client) Votes {
	return &defaultVotes{
		cli: cli,
	}
}

// 获取作品信息
func (m *defaultVotes) GetEnrollInfo(ctx context.Context, in *EnrollInfoReq) (*EnrollResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.GetEnrollInfo(ctx, in)
}

// 获取 作品列表
func (m *defaultVotes) GetEnrollList(ctx context.Context, in *ActidReq) (*EnrollListResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.GetEnrollList(ctx, in)
}

// 获取 活动信息
func (m *defaultVotes) GetActivityInfo(ctx context.Context, in *ActInfoReq) (*ActInfoResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.GetActivityInfo(ctx, in)
}

// 报名
func (m *defaultVotes) Enroll(ctx context.Context, in *EnrollReq) (*EnrollResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.Enroll(ctx, in)
}

// 投票
func (m *defaultVotes) Votes(ctx context.Context, in *VotesReq) (*VotesResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.Votes(ctx, in)
}

// 增加活动的爆光量
func (m *defaultVotes) IncrActiviView(ctx context.Context, in *ActInfoReq) (*ActInfoResp, error) {
	client := votes.NewVotesClient(m.cli.Conn())
	return client.IncrActiviView(ctx, in)
}
